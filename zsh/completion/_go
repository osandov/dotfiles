#compdef -P [568][lg] -N go gofmt
# Rename this file to _go and put it somewhere in your zsh function path
# (often /usr/share/zsh/site-functions)

# go tool
_go_tool_complete() {
  typeset -a commands build_flags
  commands+=(
    'build[compile packages and dependencies]'
    'clean[remove object files]'
    'doc[run godoc on package sources]'
    'env[print Go environment information]'
    'fix[run go tool fix on packages]'
    'fmt[run gofmt on package sources]'
    'get[download and install packages and dependencies]'
    'help[display help]'
    'install[compile and install packages and dependencies]'
    'list[list packages]'
    'run[compile and run Go program]'
    'test[test packages]'
    'tool[run specified go tool]'
    'version[print Go version]'
    'vet[run go tool vet on packages]'
  )
  if (( CURRENT == 2 )); then
    # explain go commands
    _values 'go tool commands' ${commands[@]}
    return
  fi
  build_flags=(
    '-a[force reinstallation of packages that are already up-to-date]'
    '-n[print the commands but do not run them]'
    '-p[number of parallel builds]:number'
    '-race[enable data race detection]'
    '-x[print the commands]'
    '-work[print temporary directory name and keep it]'
    '-ccflags[flags for 5c/6c/8c]:flags'
    '-gcflags[flags for 5g/6g/8g]:flags'
    '-ldflags[flags for 5l/6l/8l]:flags'
    '-gccgoflags[flags for gccgo]:flags'
    '-compiler[name of compiler to use]:name'
    '-installsuffix[suffix to add to package directory]:suffix'
    '-tags[list of build tags to consider satisfied]:tags'
  )
  _go_list() {
      local expl importpaths
      declare -a importpaths
      importpaths=($(go list ${words[$CURRENT]}... 2>/dev/null))
      _wanted importpaths expl 'import paths' compadd "$@" - "${importpaths[@]}"
  }
  case ${words[2]} in
  clean|doc)
      _arguments -s -w : '*:importpaths:_go_list'
      ;;
  fix|fmt|list|vet)
      _alternative ':importpaths:_go_list' ':files:_path_files -g "*.go"'
      ;;
  install)
      _arguments -s -w : ${build_flags[@]} \
        "-v[show package names]" \
        '*:importpaths:_go_list'
      ;;
  get)
      _arguments -s -w : \
        ${build_flags[@]}
      ;;
  build)
      _arguments -s -w : \
        ${build_flags[@]} \
        "-v[show package names]" \
        "-o[output file]:file:_files" \
        "*:args:{ _alternative ':importpaths:_go_list' ':files:_path_files -g \"*.go\"' }"
      ;;
  test)
      _arguments -s -w : \
        ${build_flags[@]} \
        "-c[do not run, compile the test binary]" \
        "-i[do not run, install dependencies]" \
        "-v[print test output]" \
        "-x[print the commands]" \
        "-short[use short mode]" \
        "-parallel[number of parallel tests]:number" \
        "-cpu[values of GOMAXPROCS to use]:number list" \
        "-run[run tests and examples matching regexp]:regexp" \
        "-bench[run benchmarks matching regexp]:regexp" \
        "-benchmem[print memory allocation stats]" \
        "-benchtime[run each benchmark until taking this long]:duration" \
        "-blockprofile[write goroutine blocking profile to file]:file" \
        "-blockprofilerate[set sampling rate of goroutine blocking profile]:number" \
        "-timeout[kill test after that duration]:duration" \
        "-cpuprofile[write CPU profile to file]:file:_files" \
        "-memprofile[write heap profile to file]:file:_files" \
        "-memprofilerate[set heap profiling rate]:number" \
        "*:args:{ _alternative ':importpaths:_go_list' ':files:_path_files -g \"*.go\"' }"
      ;;
  help)
      _values "${commands[@]}" \
        'gopath[GOPATH environment variable]' \
        'packages[description of package lists]' \
        'remote[remote import path syntax]' \
        'testflag[description of testing flags]' \
        'testfunc[description of testing functions]'
      ;;
  run)
      _arguments -s -w : \
          ${build_flags[@]} \
          '*:file:_path_files -g "*.go"'
      ;;
  tool)
      if (( CURRENT == 3 )); then
          _values "go tool" $(go tool)
          return
      fi
      case ${words[3]} in
      [568]g)
          _go_g_complete
          ;;
      [568]l)
          _go_l_complete ${words[3]%l}
          ;;
      dist)
          _values "dist tool" banner bootstrap clean env install version
          ;;
      *)
          # use files by default
          _files
          ;;
      esac
      ;;
  esac
}

_go_g_complete() {
  _arguments -s -w : \
      '-I[search for packages in DIR]:includes:_path_files -/' \
      '-L[show full path in file:line prints]' \
      '-S[print the assembly language]' \
      '-V[print the compiler version]' \
      '-e[no limit on number of errors printed]' \
      '-h[panic on an error]' \
      '-l[disable inlining]' \
      '-m[print optimization decisions]' \
      '-o[file specify output file]:file:_files' \
      '-p[assumed import path for this code]:importpath' \
      '-u[disable package unsafe]' \
      "*:file:_files -g '*.go'"
}

_go_l_complete() {
  _arguments -s -w : \
      '-o[file specify output file]:file:_files' \
      '-L[search for packages in DIR]:includes:_path_files -/' \
      "*:file:_files -g '*.[ao$1]'"
}

_gofmt_complete() {
  _arguments -s -w : \
      '-comments=-[print comments]:comments:((true\:"print comments (default)"
                                              false\:"do not print comments"))' \
      '-cpuprofile=-[cpu profile output file]:file:_files' \
      '-d=-[display diffs instead of rewriting files]:diffs:((true\:"display diffs"
                                                              false\:"rewrite files (default)"))' \
      '-e=-[report all errors]:errors:((true\:"display all errors"
                                        false\:"display only the first 10 errors on different lines (default)"))' \
      '-l=-[list files whose formatting differs from gofmt'\''s]:list:((true\:"list differing files"
                                                                        false\:"do not list differing files (default)"))' \
      '-r=-[rewrite rule]:rule' \
      '-s=-[simplify code]:simplify:((true\:"simplify code"
                                      false\:"do not simplify code (default)"))' \
      '-tabs=-[indent with tabs]:tabs:((true\:"indent with tabs (default)"
                                        false\:"indent with spaces"))' \
      '-tabwidth=-[tab width]:width' \
      '-w=-[write result in place]:write:((true\:"write result to source file"
                                           false\:"write result to stdout (default)"))' \
      "*:file:_files -g '*.go'"
}

_go_comp() {
  case "$service" in
  go)
      _go_tool_complete
      ;;
  [568]g)
      _go_g_complete
      ;;
  [568]l)
      _go_l_complete ${service%l}
      ;;
  gofmt)
      _gofmt_complete
      ;;
  esac
}

_go_comp "$@"
