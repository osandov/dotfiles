From a56c8e144c3805a770f4ae2a1850f38d3d7de6a9 Mon Sep 17 00:00:00 2001
Message-Id: <a56c8e144c3805a770f4ae2a1850f38d3d7de6a9.1533858330.git.osandov@osandov.com>
In-Reply-To: <78aa50caa9e9a24f0ffc017bbba3857805cd5c36.1533858330.git.osandov@osandov.com>
References: <78aa50caa9e9a24f0ffc017bbba3857805cd5c36.1533858330.git.osandov@osandov.com>
From: Omar Sandoval <osandov@fb.com>
Date: Fri, 8 Apr 2016 14:52:01 -0700
Subject: [PATCH 2/2] Use more sane logic for word delimiters

"Everything except for space" breaks down with Unicode. This is a
particular annoyance with the border characters in tmux. Instead, go for
explicitly whitelisting alphanumeric characters and characters valid in
URLs.
---
 config.def.h |  7 -------
 st.c         | 58 +++++++++++++++++++++++++++++++++-------------------
 2 files changed, 37 insertions(+), 28 deletions(-)

diff --git a/config.def.h b/config.def.h
index 82b1b09..692af25 100644
--- a/config.def.h
+++ b/config.def.h
@@ -27,13 +27,6 @@ char *vtiden = "\033[?6c";
 static float cwscale = 1.0;
 static float chscale = 1.0;
 
-/*
- * word delimiter string
- *
- * More advanced example: " `'\"()[]{}"
- */
-char *worddelimiters = " ";
-
 /* selection timeouts (in milliseconds) */
 static unsigned int doubleclicktimeout = 300;
 static unsigned int tripleclicktimeout = 600;
diff --git a/st.c b/st.c
index 76bb3ea..43db282 100644
--- a/st.c
+++ b/st.c
@@ -16,6 +16,7 @@
 #include <termios.h>
 #include <unistd.h>
 #include <wchar.h>
+#include <wctype.h>
 
 #include "st.h"
 #include "win.h"
@@ -42,7 +43,6 @@
 #define ISCONTROLC0(c)		(BETWEEN(c, 0, 0x1f) || (c) == '\177')
 #define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
 #define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
-#define ISDELIM(u)		(utf8strchr(worddelimiters, u) != NULL)
 
 /* constants */
 #define ISO14755CMD		"dmenu -w \"$WINDOWID\" -p codepoint: </dev/null"
@@ -214,7 +214,6 @@ static void selsnap(int *, int *, int);
 static size_t utf8decode(const char *, Rune *, size_t);
 static Rune utf8decodebyte(char, size_t *);
 static char utf8encodebyte(Rune, size_t);
-static char *utf8strchr(char *, Rune);
 static size_t utf8validate(Rune *, size_t);
 
 static char *base64dec(const char *);
@@ -236,6 +235,40 @@ static uchar utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};
 static Rune utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};
 static Rune utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};
 
+static inline int isdelim(wchar_t c)
+{
+	if (iswalnum(c))
+		return 0;
+	switch (c) {
+	case '!':
+	case '#':
+	case '$':
+	case '%':
+	case '&':
+	case '\'':
+	case '(':
+	case ')':
+	case '*':
+	case '+':
+	case ',':
+	case '-':
+	case '.':
+	case '/':
+	case ':':
+	case ';':
+	case '=':
+	case '?':
+	case '@':
+	case '[':
+	case ']':
+	case '_':
+	case '~':
+		return 0;
+	default:
+		return !iswalnum(c);
+	}
+}
+
 ssize_t
 xwrite(int fd, const char *s, size_t len)
 {
@@ -341,23 +374,6 @@ utf8encodebyte(Rune u, size_t i)
 	return utfbyte[i] | (u & ~utfmask[i]);
 }
 
-char *
-utf8strchr(char *s, Rune u)
-{
-	Rune r;
-	size_t i, j, len;
-
-	len = strlen(s);
-	for (i = 0, j = 0; i < len; i += j) {
-		if (!(j = utf8decode(&s[i], &r, len - i)))
-			break;
-		if (r == u)
-			return &(s[i]);
-	}
-
-	return NULL;
-}
-
 size_t
 utf8validate(Rune *u, size_t i)
 {
@@ -544,7 +560,7 @@ selsnap(int *x, int *y, int direction)
 		 * beginning of a line.
 		 */
 		prevgp = &term.line[*y][*x];
-		prevdelim = ISDELIM(prevgp->u);
+		prevdelim = isdelim(prevgp->u);
 		for (;;) {
 			newx = *x + direction;
 			newy = *y;
@@ -566,7 +582,7 @@ selsnap(int *x, int *y, int direction)
 				break;
 
 			gp = &term.line[newy][newx];
-			delim = ISDELIM(gp->u);
+			delim = isdelim(gp->u);
 			if (!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
 					|| (delim && gp->u != prevgp->u)))
 				break;
-- 
2.18.0

