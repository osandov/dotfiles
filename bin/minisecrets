#!/usr/bin/env python3

import argparse
import getpass
import os
import sys

import gi

gi.require_version("Secret", "1")
from gi.repository import Secret

SECRET_SCHEMA = Secret.Schema.new(
    "com.osandov.minisecrets",
    Secret.SchemaFlags.NONE,
    {"name": Secret.SchemaAttributeType.STRING},
)


def cmd_get(args):
    secret = Secret.password_lookup_sync(SECRET_SCHEMA, {"name": args.name}, None)
    if secret is None:
        sys.exit(f"Secret {args.name!r} does not exist")
    print(secret)


def cmd_set(args):
    if os.isatty(sys.stdin.fileno()):
        secret = getpass.getpass("Secret: ")
    else:
        secret = input()
    Secret.password_store_sync(
        SECRET_SCHEMA,
        {"name": args.name},
        Secret.COLLECTION_DEFAULT,
        "minisecrets " + args.name,
        secret,
        None,
    )


def cmd_delete(args):
    if not Secret.password_clear_sync(SECRET_SCHEMA, {"name": args.name}, None):
        sys.exit(f"Secret {args.name!r} does not exist")


def cmd_list(args):
    names = [
        item.get_attributes()["name"]
        for item in Secret.password_search_sync(
            SECRET_SCHEMA, {}, Secret.SearchFlags.ALL
        )
    ]
    names.sort()
    print(*names, sep="\n")


def main():
    parser = argparse.ArgumentParser(
        description="Minimal secret manager backed by freedesktop.org Secret Service (e.g., GNOME Keyring or KDE Wallet Manager)"
    )
    subparsers = parser.add_subparsers(
        title="subcommands", description="operations", dest="operation"
    )
    subparsers.required = True

    get_parser = subparsers.add_parser("get", help="print a secret to stdout")
    get_parser.add_argument("name", help="name of secret to get")
    get_parser.set_defaults(func=cmd_get)

    set_parser = subparsers.add_parser(
        "set", help="read a secret from stdin and save it"
    )
    set_parser.add_argument("name", help="name of secret to set")
    set_parser.set_defaults(func=cmd_set)

    delete_parser = subparsers.add_parser("delete", help="delete a secret")
    delete_parser.add_argument("name", help="name of secret to delete")
    delete_parser.set_defaults(func=cmd_delete)

    list_parser = subparsers.add_parser("list", help="list known secrets")
    list_parser.set_defaults(func=cmd_list)

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
